<?xml version="1.0"?>
<ruleset name="CodeCop Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

   <description>
      The CodeCop Ruleset contains a mixture of rules.
   </description>


   <!-- TODO -->
   <rule name="EmptyFunction"
         message="The given method must be implemented and not just return null."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Some abstract methods, e.g. getActionShortName() in subclasses of HBDAction, must not return null. If they will never be called, throw a OperationNotSupportedException.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ClassDeclaration//MethodDeclaration
  [MethodDeclarator [@Image='getActionShortName' or @Image='toDom' or @Image='toString' ] ]
  [Block//ReturnStatement//NullLiteral]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class FooAction {
 public String getActionShortName() {
   // should return some string for the statistic
   return null;
 }
}
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDLibraryRuleForSOAP"
         message="SOAP must only be used inside at.herold.sup.soap."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         The SOAP library must only be used inside the package at.herold.sup.soap. Other packages must not import it.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ImportDeclaration/Name[
  starts-with(@Image,'org.apache.axis') and
  //PackageDeclaration/Name[(not (starts-with(@Image,'at.herold.sup.soap')))]
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
package at.herold.a; // other than at.herold.sup.soap
import org.apache.axis.abc.Call;

public class Foo { }
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDCommitInDBLayer"
         message="Classes in DB layer must not call Connection.commit."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         HBDActions are responsible for maintaining transactions, so classes in the DB layer are not allowed to call
         Connection.commit. commit is reserved word and should also not be used as identifier.
      </description>
      <priority>2</priority>
      <!-- author>Martina Stoiber</author -->
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression[
   ( PrimaryPrefix/Name[ends-with(@Image, '.commit')] or PrimarySuffix[@Image='commit'] ) and
   //PackageDeclaration[Name[ends-with(@Image, '.resultlist') ]]
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
package at.herold.sp.resultlist;

public class BadGuy {

   public void method() {
      System.out.println("bubu");

      Connection con = getConnection();
      con.commit(); // 9
      System.out.println("we did it");

      getConnection().commit(); // 12
      System.out.println("we did it again");

      // would be ok, but may warn as well
      int commit;
      commit = 3;
      long commit = 3L;
      other.commit(bla); // 19
      other.commitIt(bla);
      other.commit2();
      other.Somecommit();
   }
}
]]>
      </example>
   </rule>


   <!-- basic.xml, by Richard Beitelmair -->
   <rule name="JumbledIterator"
         message="Non matching iterator identifier found in for loop."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/TODO">
      <description>
         The used Iterator for the 'exit expression' in a for loop does not match the 'declaration expression', maybe not intended.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
             <value>
<![CDATA[
//ForStatement[
  ( ForInit//ClassOrInterfaceType/@Image='Iterator' or
    ForInit//ClassOrInterfaceType/@Image='Enumeration'
  ) and
  ( ends-with(Expression//Name/@Image, '.hasNext') or
    ends-with(Expression//Name/@Image, '.hasMoreElements')
  ) and not (
    starts-with(Expression//Name/@Image, concat(ForInit//VariableDeclaratorId/@Image, '.'))
  )
]
]]>
             </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class JumbledIteratorExample {
   public void someMethod() {
      for (int i = 0; i < ab.size(); i++) { } // ok
      for (Enumeration en = getEnum(); en2.hasMoreElements(); ) { } // maybe wrong
      for (Enumeration en2 = getEnum(); en.hasMoreElements(); ) { } // maybe wrong
      List al = new ArrayList();
      for (Iterator it2 = al.iterator(); it.hasNext(); ) { } // maybe wrong
      for (Iterator it = al.iterator(); it2.hasNext(); ) { } // maybe wrong
      for (int i = 0; i < MAX && clauses.hasNext(); i++) { } // ok
   }
}
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDCall4TestNotInJunit"
         message="Only Classes in junit packages may call *4Test() methods."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Only test classes in .junit packages are allowed to call special test methods on objects, which are called *4Test.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression[
   ( PrimaryPrefix/Name[ends-with(@Image, '4Test')] or PrimarySuffix[ends-with(@Image, '4Test')] ) and
   //PackageDeclaration[Name[(not(ends-with(@Image, '.junit'))) ]]
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
package at.herold.sp.db.notjunit;

public class BadGuy {

   public void method() {
      System.out.println("bubu");

      Object con = getObject();
      con.run4Test(); // 9
      int result = con.run4Test(params); // 10
      System.out.println("we did it");

      getObject().run4Test(); // 13
      int res = getObject().run4Test(params); // 14
      System.out.println("we did it again");
   }

   public void method4Test() {
      // is allowed
   }
}
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDActionHasNoShortName"
         message="All concrete (not abstract) actions must implement the getActionShortName method."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         In most cases, the Logger can be declared static and final.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ClassDeclaration[@Abstract='false' and
  //UnmodifiedClassDeclaration[ends-with(@Image,'Action') and (not(ends-with(@Image,'HelperAction')))] and
  count(//MethodDeclarator[@Image='getActionShortName']) =0 ]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
public class FooAction {
   // typo occured
   public String getXActionShortName() {...}
}
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDJUnitTestHasWrongName"
         message="All concrete JUnit tests must be named ending with *Test or *TestManuell."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         All concrete JUnit tests must be named to the sheme of ending with *Test or *TestManuell to be identified and run automatically.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[
   (not(ends-with(@Image, 'Test'))) and (not(ends-with(@Image, 'TestManuell')) and (not(@Image='TCInit')) and (not(@Image='TCShutdown'))) and
   (@Abstract='false') and
   (count(ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/MethodDeclaration/MethodDeclarator[ starts-with(@Image, 'test') ])>0) and
   //PackageDeclaration[Name[(ends-with(@Image, '.junit')) or (ends-with(@Image, '.httpunit'))] ]
]   
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
package at.herold.sp.db.junit;

class BadTestClass {
   // this does not end with Test
   public void testMethod() {
   }
}

abstract class GoodAbstract {
   // is abstract, name as it likes
   public void testMethod() {
   }
}

class GoodTest {
   public void testMethod() {
   }
}

class OtherClass {
   // other class in package, ok
   public void noTestMethod() {
   }
}
]]>
      </example>
   </rule>


   <!-- TODO -->
   <rule name="HBDNewEnumOnlyInside"
         message="Enums must only be instantiated inside its Enum class itself."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Enums are special instances and not meant to be created by other classes, instead use a getEnumFor(value) on the Enum itself.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//AllocationExpression[
   (ends-with(ClassOrInterfaceType/@Image, 'Enum')) and (count(ArrayDimsAndInits)=0) and
   (not(//ClassOrInterfaceDeclaration/@Image=ClassOrInterfaceType/@Image)) ]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class MyEnum {
   public void foo() {
      new MyEnum(); // is ok
   }
}
class OtherEnum {
   public void foo() {
      new MyEnum(); // is forbidden
   }
}
class OtherClass {
   public void foo() {
      new MyEnum[0]; // array is ok
   }
}
]]>
      </example>
   </rule>


  <!-- naming.xml/controversial.xml -->
   <rule name="ParameterNameWithP"
         message="Method parameter names must start with 'p'."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         All parameters to methods and constructors are required to be named like pXyz. Use Ctrl-1 to local rename it.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FormalParameters/FormalParameter/VariableDeclaratorId[
  (not (starts-with(@Image, 'p')) ) or 
  (not (substring(@Image, 2, 1)=upper-case(substring(@Image, 2, 1))) )
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class SomeClass {
   public SomeClass(String newNo) { } // wrong
   public SomeClass(int pYes) { }
   public void setNo(String newNo) { // wrong
      no = newNo;
   }
   public void setYes(String pYes) {
      yes = pYes;
   }
}
]]>
      </example>
   </rule>


   <!-- basic.xml -->
   <rule name="UnintendedEnvUsage"
         message="getBoolean, getInteger, getLong read from System Properties and do not parse."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/TODO">
      <description>
         The methods getBoolean, getInteger and getLong read from environment (System Properties) and do not parse. Use Integer.parseInt() instead.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression/PrimaryPrefix/Name[
  @Image='Boolean.getBoolean' or
  @Image='Integer.getInteger' or
  @Image='Long.getLong'
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class UnintendedEnvUsageExample {
   public void someMethod() {
      Boolean a = Boolean.getBoolean("true"); // does not work
      Boolean b = new Boolean("true"); // ok
      Long.getLong("3"); // does not work
      Long.parseLong("3"); // ok
   }
}
]]>
      </example>
   </rule>


   <!-- junit.xml -->
   <rule name="JunitSetupDoesNotCallSuper"
         message="Methods setUp and tearDown in JUnit tests must call super.setUp/tearDown."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/TODO">
      <description>
         The framework methods setUp() and tearDown() of JUnit's Testcase must always call super.setUp() and super.tearDown() to enable proper preparing and cleaning of resources.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclarator[
  ( @Image='setUp' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='setUp'])=0
  ) or
  ( @Image='tearDown' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='tearDown'])=0
  )  or
  ( @Image='onSetUp' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='onSetUp'])=0
  )  or
  ( @Image='onTearDown' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='onTearDown'])=0
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class BadTestCase extends TestCase {
   protected void setUp() throws Exception {
      // super.setUp(); - is missing
      prepareSomething();
   }
   protected void tearDown() throws Exception {
      releaseSomething();
      // super.tearDown(); - is missing
   }
}
]]>
      </example>
   </rule>


   <!-- TODO --> <!-- by Richard Beitelmair -->
   <rule name="HBDNoAttrInPolicyAndPlugOn"
         message="Avoid non final attributes in policies and plugons."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Policies (Navigation) and Plugons (Adworx) are not threadsafe, therefore we do not allow non final members.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Final='false' and ../../..[ends-with(@Image,'PlugOn') or ends-with(@Image,'Policy')]]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class SPAdWorxChannelPlugOn {
   private final String channel; // ok
   private boolean showIfSearchedInRegion; // not ok
}
public class SPAdWorxChannelPlugOnKey {
   private final String channel;  // ok
   private boolean showIfSearchedInRegion; // ok
}
public class SPPolicy {
   private final String channel; // ok
   private boolean showIfSearchedInRegion; // not ok
}
public class SPPolitesse {
   private final String channel;  // ok
   private boolean showIfSearchedInRegion; // ok
}
]]>
      </example>
   </rule>


   <!-- naming.xml/controversial.xml --> <!-- by Richard Beitelmair -->
   <rule name="InterfaceNamesEndWithIF"
         message="Interface names should end with 'IF'."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         For better recognition interface names should end with 'IF'. Rename the interface!
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='true' and not (ends-with(@Image, 'IF'))]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public interface SomeInterface { }     // nok
public interface SomeInterfaceF { }    // nok
public interface SomeInterfaceIF { }   // ok
public class SomeClass { }             // ok
]]>
      </example>
   </rule>
   
   
   <!-- TODO --> <!-- by Manuel Tichy -->
   <rule name="HBDExceptionNotAllowed"
         message="The use of HBDException is not allowed anymore."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         The framework is only using RunntimeExceptions. Checked Exceptions are not allowed anymore.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceType[@Image='HBDException']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class MyClass extends OtherClass
{
	public void myMethod()	throws HBDException	// "throws HBDException" is not allowed!
	{
		try
		{
			...
			throw new HBDException("...");	// "throw new HBDException" is not allowed!
		}
		catch(final HBDException e)	// "catch HBDException" is not allowed!
		{
			...
		}
	}
}
]]>
      </example>
   </rule>
   
   
   <!-- strictexception.xml --> <!-- by Manuel Tichy -->
   <rule name="NonFinalFieldInException"
         message="Exceptions must be immutable."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Exceptions must be immutable, so the fields of an Exception must be declared as final.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[ @Final='false' and ../../../../ClassOrInterfaceDeclaration[ends-with(@Image, 'Exception')] ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class BadException extends Exception {
    private long serialVersionUID = 1900926677490660714L;   // Not ok - must be final!

    public BadException(String message) {
        super(message);
    }
}
]]>
      </example>
   </rule>
   
   
   <!-- design.xml --> <!-- by Manuel Tichy -->
   <rule name="AvoidPrivateGetterAndSetter"
         message="Don't use private getters/setters."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Instead of using private getter or setter, we use the member variable instead. It's easier to read and saves lines of code.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration [ 
  @Private='true' and 
  @Synchronized='false' and 
  count(Block/BlockStatement)=1 and
  (
     (
        MethodDeclarator[starts-with(@Image,'set')] and
        MethodDeclarator/FormalParameters[count(FormalParameter)=1] and 
        ResultType[count(Type)=0] and 
        Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression[count(PrimarySuffix/Arguments)=0] and 
        //AssignmentOperator[@Image='=']
     ) or (
        MethodDeclarator[starts-with(@Image,'get') or starts-with(@Image,'is')] and 
        MethodDeclarator/FormalParameters[count(FormalParameter)=0] and 
        ResultType/Type[count(ReferenceType)=1] and 
        Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0] and 
        count(Block/BlockStatement/Statement/ReturnStatement)=1
     )
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class AvoidPrivateGetterAndSetterExample {
   String myVariable;
   private void setMyVariable(String pMyVariable) {    // useless
      myVarialbe = pMyVariable;
   }
   ...
   myVariable = "asdfasdf";      // good, use the member variable instead of
}
]]>
      </example>
   </rule>
      
      
   <!-- design.xml --> <!-- by Manuel Tichy -->
   <rule name="MembersMustBePrivate"
         message="Members must be private except they are static and final"
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Members must be private, except static final constants. Change Member to private and create getter and/or setter to access value/s.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Private='false' and (@Static='false' or @Final='false')]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class MembersMustBePrivateExample {
   public int z1 = 1;      WRONG must be private
   private int z2 = 2;     OK its private (without static and final)
   protected int z3;       WRONG must be private

   public static int z4 = 1;     WRONG final is missing
   private static int z5 = 2;    OK its private (with static)
   protected static int z6 = 3;  WRONG final is missing

   public static final int z7 = 1;     OK because static + final
   private static final int z8 = 2;    OK its private (with static + final)
   protected static final int z9 = 3;  OK because static + final
]]>
      </example>
   </rule>
   

   <!-- strictexeption.xml -->
   <rule name="SignatureDeclareThrowsException"
         since="3.1"
         message="A method/constructor shouldn't explicitly throw java.lang.Exception"
         class="org.codecop.pmd.rule.ExceptionSignatureDeclaration"
         externalInfoUrl="http://pmd.sourceforge.net/rules/strictexception.html#SignatureDeclareThrowsException">
      <description>
         It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.
      </description>
      <!-- Rule from PMD, only allow exceptions for methods "setUp", "tearDown" -->
      <priority>2</priority>
      <properties>
         <property name="ignoreTests" description="Ignore test methods" value="false"/>
      </properties>
      <example>
<![CDATA[
public void methodThrowingException() throws Exception { }
]]>
      </example>
   </rule>


   <!-- naming.xml --> 
   <rule name="ClassNamingConventions"
         since="3.1"
         message="Class names should begin with an uppercase character, not include underscores or dollar signs."
         class="org.codecop.pmd.rule.ClassNamingConventions"
         externalInfoUrl="http://pmd.sourceforge.net/rules/naming.html#ClassNamingConventions">
      <description>
         Class names should always begin with an upper case character, and should not contain underscores (but _Stub or _Core) or dollar signs. Class names should not be uppercase only.
      </description>
      <!-- Rule from PMD and made it a bit more strict -->
      <priority>2</priority>
      <properties>
         <property name="upperCaseLen" description="Allowed length of upper case only names" value="3" />
      </properties>
      <example>
<![CDATA[
public class FOOBAR {}   // bad
public class Foo_Bar {}  // bad
public class Foo$Bar {}  // bad

public class URI {}      // ok - short abbrev
public class Foo_Stub {} // ok - created by RMI compiler
public class Foo_Core {} // ok - Generation Gap Pattern
]]>
      </example>
   </rule>
   
</ruleset>
