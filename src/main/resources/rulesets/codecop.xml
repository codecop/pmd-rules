<?xml version="1.0"?>
<ruleset name="CodeCop Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

   <description>
      The CodeCop ruleset contains a mixture of general rules for various bugs and conventions.
   </description>


   <!-- basic.xml, by Richard Beitelmair -->
   <rule name="JumbledIterator"
         message="Non matching iterator identifier found in for loop."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/2010/05/custom-pmd-rules.html">
      <description>
         The used Iterator for the 'exit expression' in a for loop does not match the 'declaration expression', most likely this is not intended.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
             <value>
<![CDATA[
//ForStatement[
  ( ForInit//ClassOrInterfaceType/@Image='Iterator' or
    ForInit//ClassOrInterfaceType/@Image='Enumeration'
  ) and
  ( ends-with(Expression//Name/@Image, '.hasNext') or
    ends-with(Expression//Name/@Image, '.hasMoreElements')
  ) and not (
    starts-with(Expression//Name/@Image, concat(ForInit//VariableDeclaratorId/@Image, '.'))
  )
]
]]>
             </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class JumbledIteratorExample {
   public void someMethod() {
      for (int i = 0; i < ab.size(); i++) { } // ok
      for (Enumeration en = getEnum(); en2.hasMoreElements(); ) { } // maybe wrong
      for (Enumeration en2 = getEnum(); en.hasMoreElements(); ) { } // maybe wrong
      List al = new ArrayList();
      for (Iterator it2 = al.iterator(); it.hasNext(); ) { } // maybe wrong
      for (Iterator it = al.iterator(); it2.hasNext(); ) { } // maybe wrong
      for (int i = 0; i < MAX && clauses.hasNext(); i++) { } // ok
   }
}
]]>
      </example>
   </rule>


   <!-- naming.xml/controversial.xml -->
   <rule name="ParameterNameWithP"
         message="Method parameter names must start with 'p'."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         All parameters of methods and constructors are required to be named like pXyz. Use Ctrl-1 to local rename it.
      </description>
      <priority>2</priority>
      <properties>
         <property name="prefix" description="Mandatory prefix to parameter names" value="p" />
         <property name="xpath">
            <value>
<![CDATA[
//FormalParameters/FormalParameter/VariableDeclaratorId[
  (not (starts-with(@Image, $prefix))) or 
  (not (substring(@Image, 2, 1)=upper-case(substring(@Image, 2, 1))) )
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class ParameterNameWithPExample {
   public SomeClass(String newNo) { } // wrong
   public SomeClass(int pYes) { }
   public void setNo(String newNo) { // wrong
      no = newNo;
   }
   public void setYes(String pYes) {
      yes = pYes;
   }
}
]]>
      </example>
   </rule>


   <!-- basic.xml -->
   <rule name="UnintendedEnvUsage"
         message="getBoolean, getInteger, getLong read from System Properties and do not parse."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/2010/05/custom-pmd-rules.html">
      <description>
         The methods getBoolean, getInteger and getLong read from environment (System Properties) and do not parse. Use Integer.parseInt() instead.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression/PrimaryPrefix/Name[
  @Image='Integer.getInteger' or
  @Image='Boolean.getBoolean' or
  @Image='Long.getLong'
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class UnintendedEnvUsageExample {
   public void someMethod() {
      Boolean a = Boolean.getBoolean("true"); // does not work
      Boolean b = new Boolean("true"); // ok
      Long.getLong("3"); // does not work
      Long.parseLong("3"); // ok
   }
}
]]>
      </example>
   </rule>


   <!-- junit.xml -->
   <rule name="JunitSetupDoesNotCallSuper"
         message="Methods setUp and tearDown in JUnit tests must call super.setUp/tearDown."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://blog.code-cop.org/2010/05/custom-pmd-rules.html">
      <description>
         The framework methods setUp() and tearDown() of JUnit's Testcase must always call super.setUp() and super.tearDown() to enable proper preparing and cleaning of resources.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclarator[
  ( @Image='setUp' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='setUp'])=0
  ) or
  ( @Image='tearDown' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='tearDown'])=0
  )  or
  ( @Image='onSetUp' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='onSetUp'])=0
  )  or
  ( @Image='onTearDown' and count(FormalParameters/*)=0 and
    count(../Block//PrimaryPrefix[@Image='onTearDown'])=0
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class BadTestCase extends TestCase {
   protected void setUp() throws Exception {
      // super.setUp(); - is missing
      prepareSomething();
   }
   protected void tearDown() throws Exception {
      releaseSomething();
      // super.tearDown(); - is missing
   }
}
]]>
      </example>
   </rule>


   <!-- naming.xml/controversial.xml --> <!-- by Richard Beitelmair -->
   <rule name="InterfaceNamesEndWithIF"
         message="Interface names should end with 'IF'."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         For better recognition interface names should end with 'IF'. Rename the interface!
      </description>
      <priority>2</priority>
      <properties>
         <property name="suffix" description="Mandatory suffix to interface names" value="IF" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='true' and not (ends-with(@Image, $suffix))]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public interface SomeInterface { }     // nok
public interface SomeInterfaceF { }    // nok
public interface SomeInterfaceIF { }   // ok
public class SomeClass { }             // ok
]]>
      </example>
   </rule>


   <!-- naming.xml/controversial.xml --> 
   <rule name="InterfaceNamesStartWithI"
         message="Interface names should start with 'I'."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         For better recognition interface names should start with 'I'. Rename the interface!
      </description>
      <priority>2</priority>
      <properties>
         <property name="prefix" description="Mandatory prefix to interface names" value="I" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[@Interface='true' and not (starts-with(@Image, $prefix))]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public interface SomeInterface { }     // nok
public interface SomeInterface { }     // nok
public interface ISomeInterface { }    // ok
public class SomeClass { }             // ok
]]>
      </example>
   </rule>


   <!-- migrating.xml --> <!-- by Richard Beitelmair -->
   <rule name="AtomWrapperInstantiation"
         since="3.5"
         message="Avoid instantiating Wrapper Type objects. Call Type.valueOf() instead."
         class="net.sourceforge.pmd.rules.XPathRule"
         externalInfoUrl="http://pmd.sourceforge.net/rules/migrating.html#IntegerInstantiation">
      <description>
         In JDK 1.5, calling new Type() causes memory allocation. Type.valueOf() is more memory friendly.
      </description>
      <!-- Rule copied from PMD's migrating.xml/IntegerInstantiation, but for all types at once -->
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryPrefix/AllocationExpression[
  not (ArrayDimsAndInits) and 
  (
    ClassOrInterfaceType/@Image='Byte' or ClassOrInterfaceType/@Image='java.lang.Byte' or
    ClassOrInterfaceType/@Image='Short' or ClassOrInterfaceType/@Image='java.lang.Short' or
    ClassOrInterfaceType/@Image='Integer' or ClassOrInterfaceType/@Image='java.lang.Integer' or
    ClassOrInterfaceType/@Image='Long' or ClassOrInterfaceType/@Image='java.lang.Long' or
    ClassOrInterfaceType/@Image='Character' or ClassOrInterfaceType/@Image='java.lang.Character'
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class AtomWrapperInstantiationExample {
    Byte myByte = new Byte(1);    // bad
    Byte byte2 = Byte.valueOf(1); // ok
    Short myshort = new Short(20);       // bad
    Short myshort2 = Short.valueOf(20);  // ok 
    Integer integer = new Integer(4);      // bad
    Integer integer2 = Integer.valueOf(4); // ok
    Long myLong = new Long(10000000);       // bad
    Long myLong2 = Long.valueOf(10000000);  // ok
    Character myChar = new Character('x');    // bad
    Character char2 = Character.valueOf('x'); // ok
}
]]>
      </example>
   </rule>


   <!-- migrating.xml --> 
   <rule name="CharInstantiation"
         since="4.0"
         message="Avoid instantiating Character objects. Call Character.valueOf() instead."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         In JDK 1.5, calling new Character() causes memory allocation. Character.valueOf() is more memory friendly.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryPrefix/AllocationExpression[ 
  not (ArrayDimsAndInits) and 
  ( ClassOrInterfaceType/@Image='Character' or ClassOrInterfaceType/@Image='java.lang.Character' )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class CharInstantiationExample {
    Character char1 = new Character('x');     // bad
    Character char2 = Character.valueOf('x'); // ok
}
]]>
      </example>
   </rule>

   
   <!-- strictexception.xml --> <!-- by Manuel Tichy -->
   <rule name="NonFinalFieldInException"
         message="Exceptions must be immutable."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Exceptions must be immutable, so the fields of an Exception must be declared as final.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[ @Final='false' and ../../../../ClassOrInterfaceDeclaration[ends-with(@Image, 'Exception')] ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class BadException extends Exception {
    private static long serialVersionUID = 1900926677490660714L; // Not ok - must be final!
    private String state;                                        // Not ok - must be final!
    public BadException(String message) {
        super(message);
    }
}
]]>
      </example>
   </rule>
   
   
   <!-- design.xml --> <!-- by Manuel Tichy -->
   <rule name="AvoidPrivateGetterAndSetter"
         message="Don't use private getters/setters."
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Instead of using private getter or setter, we use the member variable instead. It's easier to read and saves lines of code.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration [ 
  @Private='true' and 
  @Synchronized='false' and 
  count(Block/BlockStatement)=1 and
  (
     (
        MethodDeclarator[starts-with(@Image,'set')] and
        MethodDeclarator/FormalParameters[count(FormalParameter)=1] and 
        ResultType[count(Type)=0] and 
        Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression[count(PrimarySuffix/Arguments)=0] and 
        //AssignmentOperator[@Image='=']
     ) or (
        MethodDeclarator[starts-with(@Image,'get') or starts-with(@Image,'is')] and 
        MethodDeclarator/FormalParameters[count(FormalParameter)=0] and 
        ResultType/Type[count(ReferenceType)=1] and 
        Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0] and 
        count(Block/BlockStatement/Statement/ReturnStatement)=1
     )
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class AvoidPrivateGetterAndSetterExample {
   String myVariable;
   private void setMyVariable(String pMyVariable) {    // useless
      myVarialbe = pMyVariable;
   }
   ...
   myVariable = "asdfasdf";      // good, use the member variable instead of
}
]]>
      </example>
   </rule>
      
      
   <!-- design.xml --> <!-- by Manuel Tichy -->
   <rule name="MembersMustBePrivate"
         message="Members must be private except they are static and final"
         class="net.sourceforge.pmd.rules.XPathRule">
      <description>
         Members must be private, except static final constants. Change Member to private and create getter and/or setter to access value/s.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Private='false' and (@Static='false' or @Final='false')]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class MembersMustBePrivateExample {
   public int z1 = 1;      WRONG must be private
   private int z2 = 2;     OK its private (without static and final)
   protected int z3;       WRONG must be private

   public static int z4 = 1;     WRONG final is missing
   private static int z5 = 2;    OK its private (with static)
   protected static int z6 = 3;  WRONG final is missing

   public static final int z7 = 1;     OK because static + final
   private static final int z8 = 2;    OK its private (with static + final)
   protected static final int z9 = 3;  OK because static + final
]]>
      </example>
   </rule>
   

   <!-- strictexeption.xml -->
   <rule name="SignatureDeclareThrowsException"
         since="3.1"
         message="A method/constructor shouldn't explicitly throw java.lang.Exception"
         class="org.codecop.pmd.rule.ExceptionSignatureDeclaration"
         externalInfoUrl="http://pmd.sourceforge.net/rules/strictexception.html#SignatureDeclareThrowsException">
      <description>
         It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and 
         understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.
      </description>
      <!-- Rule copied from PMD 3.1 (no type inference), but only allow exceptions for methods "setUp", "tearDown" -->
      <priority>2</priority>
      <properties>
         <property name="ignoreTests" description="Ignore test methods" value="false"/>
      </properties>
      <example>
<![CDATA[
public void methodThrowingException() throws Exception { }
]]>
      </example>
   </rule>


   <!-- naming.xml --> 
   <rule name="ClassNamingConventions"
         since="3.1"
         message="Class names should begin with an uppercase character, not include underscores or dollar signs."
         class="org.codecop.pmd.rule.ClassNamingConventions"
         externalInfoUrl="http://pmd.sourceforge.net/rules/naming.html#ClassNamingConventions">
      <description>
         Class names should always begin with an upper case character, and should not contain underscores 
         (but _Stub or _Core) or dollar signs. Class names should not be uppercase only.
      </description>
      <!-- Rule copied from PMD 3.1 and made it a bit more strict -->
      <priority>2</priority>
      <properties>
         <property name="upperCaseLen" description="Allowed length of upper case only names" value="3" />
      </properties>
      <example>
<![CDATA[
public class FOOBAR {}   // bad
public class Foo_Bar {}  // bad
public class Foo$Bar {}  // bad

public class URI {}      // ok - short abbrev
public class Foo_Stub {} // ok - created by RMI compiler
public class Foo_Core {} // ok - Generation Gap Pattern
]]>
      </example>
   </rule>
   
</ruleset>
