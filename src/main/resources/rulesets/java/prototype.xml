<?xml version="1.0"?>
<ruleset name="Prototype"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

   <description>
      Very specific rules but useless on general code. They serve as examples and prototypes to copy from.
   </description>


   <!-- typeresolution.xml -->
   <rule name="EntityWithReferences"
         language="java"
         since="4.1"
         message="Entities must define all attributes with RelationShips."
         class="org.codecop.pmd.prototype.EntityWithReferences"
         typeResolution="true"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#entitywithreferences">
      <description>
         In a specific Rich Domain Model all Entities (subclasses of Entity) must define their attributes as (subclasses of) RelationShips.
         Simple attributes are not allowed. To fix this rule, wrap all simple attributes with a RelationShip of proper type accordingly.
      </description>
      <priority>2</priority>
      <example>
<![CDATA[
public class RelationShip<T> { }
public class BetterRelationShip<T> extends RelationShip<T> { }
public class Entity { }
public class BetterEntity extends Entity { }
public class BadEntity extends BetterEntity {
   private RelationShip<MyString> astring; // ok
   private MyString bstring; // wrong
   private int bint; // wrong
}
]]>
      </example>
   </rule>


   <!-- typeresolution.xml -->
   <rule name="ImmutableValueObject"
         language="java"
         since="4.1"
         message="ValueObjects must not define RelationShips and be immutable."
         class="org.codecop.pmd.prototype.ImmutableValueObject"
         typeResolution="true"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#immutablevalueobject">
      <description>
         In a specific Rich Domain Model all Value Objects (subclasses of ValueObjects) must not define their attributes as (subclasses of)
         RelationShips. Just simple attributes are allowed.
      </description>
      <priority>2</priority>
      <example>
<![CDATA[
public class ValueObject { }
public class BadValueObject extends ValueObject {
   private MyString astring;
   private BetterRelationShip<MyString> bstring; // wrong
   public void changeAstring(MyString string) { // wrong
      astring = string;
   }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="EmptyFunction"
         language="java"
         message="The given method must be implemented and not just return null."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#emptyfunction">
      <description>
         Some methods, e.g. toString or getName() in subclasses of Action, must not just return null.
         If they will never be called, throw a OperationNotSupportedException.
      </description>
      <priority>2</priority>
      <properties>
         <property name="method" type="String" description="Name of the method to check" value="getName" />
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration
  [MethodDeclarator[@Image=$method or @Image='toString']]
    [Block//ReturnStatement//NullLiteral]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class FooAction {
  public String getName() {
    return null; // should return some string for statistics.
  }
}
]]>
      </example>
   </rule>


   <!-- design.xml --> <!-- by Martina Stoiber -->
   <rule name="CommitInDBLayer"
         language="java"
         message="Classes in DB layer must not call Connection.commit."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#commitindblayer">
      <description>
         Services are responsible for maintaining transactions, so classes in the DB layer are not allowed to call
         Connection.commit. commit is a reserved word and should also not be used as identifier.
      </description>
      <priority>2</priority>
      <properties>
         <property name="method" type="String" description="Name of the commit method" value="commit" />
         <property name="package" type="String" description="Suffix of the db layer package name" value=".resultlist" />
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression[
   ( PrimaryPrefix/Name[ends-with(@Image, $method)] or PrimarySuffix[@Image=$method] ) and
   //PackageDeclaration[Name[ends-with(@Image, $package) ]]
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
package some.resultlist;

public class CommitInDBLayerExample {

   public void methodOne() {
      Connection con = getConnection();
      con.commit();
      System.out.println("we did it");
   }
   public void methodTwo() {
      getConnection().commit();
      System.out.println("we did it again");
   }
   public void methodThree() {
      // would be ok, but may warn as well
      other.commit(bla);
   }
   public void okOne() {
      int commit;
      // commit = 3; - false positive
      // other.Somecommit(); - false positive
   }
   public void okTwo() {
      long commit = 3L;
      other.commitIt(bla);
      other.commit2();
   }
}
]]>
      </example>
   </rule>


   <!-- coupling.xml -->
   <rule name="Call4MethodNotInPackage"
         language="java"
         message="Only Classes in $package packages may call *$method() methods."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#call4methodnotinpackage">
      <description>
         Only certain classes in $package packages are allowed to call special methods on objects, which are suffixed by $method.
      </description>
      <priority>2</priority>
      <properties>
         <property name="method" type="String" description="Suffix of the method name" value="4Test" />
         <property name="package" type="String" description="Suffix of the allowed package name" value=".junit" />
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression[
   ( PrimaryPrefix/Name[ends-with(@Image, $method)] or PrimarySuffix[ends-with(@Image, $method)] )
   and
   //PackageDeclaration[Name[ not (ends-with(@Image, $package)) ]]
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
package some.notjunit;

public class BadGuy {

   public void method() {
      Object con = getObject();
      con.run4Test();
      int result = con.run4Test(params);
      System.out.println("we did it");

      getObject().run4Test();
      int res = getObject().run4Test(params);
      System.out.println("we did it again");
   }

   public void method4Test() { } // is allowed
}
]]>
      </example>
   </rule>


   <!-- logging-java.xml -->
   <rule name="MoreThanOneCustomLogger"
         language="java"
         since="2.0"
         message="Class contains more than one logger."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#morethanonecustomlogger">
      <description>
         Normally only one logger is used in each class.
      </description>
      <!-- Rule copied from PMD's MoreThanOneLogger, but changed name of Logger -->
      <priority>2</priority>
      <properties>
         <property name="logger" type="String" description="Name of the logger type" value="LoggerImpl" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceBody[
  count(//VariableDeclarator[parent::FieldDeclaration][../Type/ReferenceType/ClassOrInterfaceType[@Image=$logger]]) > 1
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class Foo {
   LoggerImpl logger = LoggerUtil.getLogger(Foo.class);
   // It is very rare to see two loggers on a class, normally
   // log information is multiplexed by levels
   LoggerImpl log2 = LoggerUtil.getLogger(Foo.class.getName());
}
]]>
      </example>
   </rule>


   <!-- logging-java.xml -->
   <rule name="CustomLoggerIsNotStaticFinal"
         language="java"
         since="2.0"
         message="The Logger variable declaration does not contain the static and final modifiers."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#customloggerisnotstaticfinal">
      <description>
         In most cases, the Logger can be declared private, static and final.
      </description>
      <!-- Rule copied from PMD's LoggerIsNotStaticFinal, but changed name of Logger -->
      <priority>2</priority>
      <properties>
         <property name="logger" type="String" description="Name of the logger type" value="LoggerImpl" />
         <property name="xpath">
            <value>
<![CDATA[
//VariableDeclarator[parent::FieldDeclaration][
  ../Type/ReferenceType/ClassOrInterfaceType[@Image=$logger] and
  ( ..[@Final='false'] or ..[@Static='false'] or .. [@Private='false'] )
]
]]>
            </value>
            <!-- maybe not static? -->
         </property>
      </properties>
      <example>
 <![CDATA[
class Foo {
    LoggerImpl logger = LoggerUtil.getLogger(Foo.class);
    // It is much better to declare the logger as follows
    // static final LoggerImpl logger = LoggerUtil.getLogger(Foo.class);
}
]]>
      </example>
   </rule>


   <!-- design.xml --> <!-- by Richard Beitelmair -->
   <rule name="NoAttrInClass"
         language="java"
         message="Avoid non final attributes in this class."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#noattrinclass">
      <description>
         This class is shared by threads but not threadsafe. Therefore it must only have final members.
      </description>
      <priority>2</priority>
      <properties>
         <property name="suffix" type="String" description="Class name suffix" value="Policy" />
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Final='false' and ../../..[ends-with(@Image,$suffix)]]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class AdWorxChannelPolicy {
   private final String channel; // ok
   private boolean showIfSearchedInRegion; // not ok
}
// other class
public class AdWorxChannelPolicyKey {
   private final String channel;  // ok
   private boolean showIfSearchedInRegion; // ok
}
]]>
      </example>
   </rule>
   <!-- might use Typeresolution to find super class instead of relying on class name -->


   <!-- coupling.xml --> <!-- by Manuel Tichy -->
   <rule name="TypeNotAllowed"
         language="java"
         message="The use of this type is not allowed."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#typenotallowed">
      <description>
         The use of this type is not allowed.
      </description>
      <priority>2</priority>
      <properties>
         <property name="simple" type="String" description="Forbidden type simple name" value="HBDException" />
         <property name="full" type="String" description="Forbidden type full name" value="org.codecop.HBDException" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceType[@Image=$simple or @Image=$full]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class MyClass extends OtherClass {
   public void myMethod() {
      try {
         // ...
         throw new org.codecop.HBDException("..."); // "throw new HBDException" is not allowed!
      } catch(HBDException e) { // "catch HBDException" is not allowed!
         // ...
      }
   }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="ActionHasNoShortName"
         language="java"
         message="All concrete (not abstract) actions must implement the $method method."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#actionhasnoshortname">
      <description>
         Certain classes need to define and redefine a method on their own regardless of superclasses have provided it or not.
      </description>
      <priority>2</priority>
      <properties>
         <property name="suffix" type="String" description="Class name suffix" value="Action" />
         <property name="method" type="String" description="Name of the method to implement" value="getActionShortName" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[
  ends-with(@Image, $suffix) and
  not (ends-with(@Image,'HelperAction')) and
  @Abstract='false' and
  count(//MethodDeclarator[@Image=$method])=0
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
public class FooAction {
   public String getXActionShortName() { // typo occured
      return "abc";
   }
}
]]>
      </example>
   </rule>
   <!-- might use Typeresolution to find super class instead of relying on class name -->


   <!-- junit.xml -->
   <rule name="JUnitTestHasWrongName"
         language="java"
         message="All concrete JUnit tests must be named ending with Test."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#junittesthaswrongname">
      <description>
         All concrete JUnit tests must be named to the sheme of ending with Test to be identified and run automatically.
      </description>
      <priority>2</priority>
      <properties>
         <property name="package" type="String" description="Suffix of the package name" value=".junit" />
         <property name="suffix" type="String" description="Mandatory suffix of the class name" value="Test" />
         <property name="xpath">
            <value>
<![CDATA[
//ClassOrInterfaceDeclaration[
   not (ends-with(@Image, $suffix)) and
   not (ends-with(@Image, 'TestManuell')) and
   not (@Image='TCInit') and
   @Abstract='false' and
   //PackageDeclaration[Name[ ends-with(@Image, $package) ]]
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
package some.junit;

class BadTestClass {
  // this does not end with Test
}

abstract class GoodAbstract {
   // is abstract, name as it likes
}

class GoodTest {
   // ok
}
]]>
      </example>
   </rule>


   <!-- coupling.xml -->
   <rule name="NewEnumOnlyInside"
         language="java"
         message="Enums must only be instantiated inside its own Enum class."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://github.com/codecop/pmd-rules/wiki/PmdRulesPrototype#newenumonlyinside">
      <description>
         Enums are special instances and not meant to be created by other classes, instead use a getEnumFor(value) on the Enum itself.
      </description>
      <priority>2</priority>
      <properties>
         <property name="suffix" type="String" description="Enum type name suffix" value="Enum" />
         <property name="xpath">
            <value>
<![CDATA[
//AllocationExpression[
   ends-with(ClassOrInterfaceType/@Image, $suffix) and
   (count(ArrayDimsAndInits)=0) and
   not (//ClassOrInterfaceDeclaration/@Image=ClassOrInterfaceType/@Image)
]
]]>
            </value>
         </property>
      </properties>
      <example>
 <![CDATA[
class MyEnum {
   public void foo() {
      new MyEnum(); // is ok
   }
}
class OtherEnum {
   public void foo() {
      new MyEnum(); // is forbidden
   }
}
class OtherClass {
   public void foo() {
      new MyEnum[0]; // array is ok
   }
}
]]>
      </example>
   </rule>
   <!-- might use Typeresolution to find super class instead of relying on class name -->

</ruleset>
