<?xml version="1.0"?>
<ruleset name="Constraints"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

   <description>
      Special (likely controversial) rules for constraints in code katas, Coding Dojos and Code Retreats.
      See http://coderetreat.org/facilitating/activity-catalog
      Some less extreme rules like PrimitiveObsession or FirstClassCollections are located in the regular
      codecop.xml ruleset, see https://code.google.com/p/code-cop-code/wiki/PmdRulesCodecop
   </description>


   <rule name="OnlyVoidMethods"
         language="java"
         message="All methods must be void."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#OnlyVoidMethods">
      <description>
         As an exercise only void methods are allowed. This enforces Tell, Don't Ask design. Only inherited Object methods can be non-void.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Void='false' and 
        not(@MethodName='hashCode' or @MethodName='equals' or @MethodName='toString' or @MethodName='clone' or @MethodName='compare')
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public int nonVoidMethod(byte b){
        return 1;
    }
}
]]>
      </example>
   </rule>
   
   
   <rule name="NoVoidMethods"
         language="java"
         message="All methods must be non void."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#NoVoidMethods">
      <description>
         As an exercise no void methods are allowed. This is the functional style. Only JUnit tests and custom asserts can have void methods.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Void='true' and
        not(../Annotation/MarkerAnnotation/Name[@Image='Test' or @Image='Before' or @Image='After']) and
        not(MethodDeclarator[@Image='run' or substring(@Image,1,6)='assert'])
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class BadClass {
    public void voidMethod(){
    }
}
public class OkClass {
    public int getIt(){
    }
}
]]>
      </example>
   </rule>
   
   
   <rule name="NoLoops"
         language="java"
         message="No loops."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#NoLoops">
      <description>
         As an exercise no loop constructs are allowed. You cannot use for, do or while.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ForStatement | //WhileStatement | //DoStatement
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
    public void main() {
        for (int i = 0; i < 3; i++) { }

        int i = 0;
        while (i < 3) { i++; }

        do { } while (false);
    }
]]>
      </example>
   </rule>
   

   <rule name="NoElseKeyword"
         language="java"
         message="No else keyword."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#NoElseKeyword">
      <description>
         As an exercise no else statement is allowed. This is rule 2 of Object Calisthenics.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//IfStatement[@Else='true']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public void main() { 
        // ok, no else        
        if (true) { }

        // bad, hase else
        if (false) { } else { }        
    }
}
]]>
      </example>
   </rule>
   

   <rule name="NoConditionals"
         language="java"
         message="No conditional statements."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#NoConditionals">
      <description>
         As an exercise no conditional statements are allowed. You cannot use if, while, switch or ?:.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//IfStatement | //WhileStatement | //ConditionalExpression | //SwitchStatement
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public void main() {
        if (true) {  } 
        int i = true ? 1 : 2;
        switch(i) { case 0: break; }
        while(true) {  }
    }
}
]]>
      </example>
   </rule>
   

   <!-- design.xml -->
   <rule name="NoGetterAndSetter"
         language="java"
         message="Don't use getters or setters."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#NoGetterAndSetter">
      <description>
         Do not use getter or setter to enforces encapsulation. This is rule 9 of Object Calisthenics.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration [ 
  @Synchronized='false' and 
  count(Block/BlockStatement)=1 and
  (
     (
        MethodDeclarator/FormalParameters[count(FormalParameter)=1] and 
        ResultType[count(Type)=0] and 
        Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression[
           count(PrimarySuffix/Arguments)=0
        ] and //AssignmentOperator[@Image='=']
     ) or (
        MethodDeclarator/FormalParameters[count(FormalParameter)=0] and 
        ResultType/Type[count(ReferenceType)=1] and 
        Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression[count(PrimarySuffix)=0] and 
        count(Block/BlockStatement/Statement/ReturnStatement)=1
     )
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class AvoidGetterAndSetterExample {
   String myVariable;
   void setMyVariable(String pMyVariable) {    // don't use
      myVarialbe = pMyVariable;
   }
   ...
   myVariable = "asdfasdf";
}
]]>
      </example>
   </rule>


   <rule name="OnlyStaticMethods"
         language="java"
         message="All methods must be static."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#OnlyStaticMethods">
      <description>
         As an exercise only static methods are allowed. This exaggerates the common mistake to have too many static methods. Only inherited Object methods can be non-static.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Static='false' and 
        not(@MethodName='hashCode' or @MethodName='equals' or @MethodName='toString' or @MethodName='clone' or @MethodName='compare')
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public int nonStaticMethod(byte b){
        return 1;
    }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="ImmutablesOnly"
         language="java"
         message="Avoid mutable state."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://code.google.com/p/code-cop-code/wiki/PmdRulesConstraints#ImmutablesOnly">
      <description>
         Immutable data structures are easier to reason about and have no concurrency issues.
         Only final fields are allowed.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Final='false']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class SomeClass {
   private final String channel; // ok
   private boolean showIfSearchedInRegion; // not ok
}
]]>
      </example>
   </rule>
   
</ruleset>
