<?xml version="1.0"?>
<ruleset name="Constraints"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

   <description>
      Special (likely controversial) rules for constraints in code katas, Coding Dojos and Code Retreats.
      See http://coderetreat.org/facilitating/activity-catalog
      Some less extreme rules like PrimitiveObsession or FirstClassCollections are located in the regular
      codecop.xml rule set.
   </description>


   <rule name="OnlyVoidMethods"
         language="java"
         message="All methods must be void."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!onlyvoidmethods">
      <description>
         As an exercise only void methods are allowed. This enforces Tell, Don't Ask design. Only inherited Object methods can be non-void.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Void='false' and
        not(@MethodName='hashCode' or @MethodName='equals'    or
            @MethodName='toString' or @MethodName='clone'     or
            @MethodName='compare'  or @MethodName='compareTo' )
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public int nonVoidMethod(byte b){
        return 1;
    }
}
]]>
      </example>
   </rule>


   <rule name="NoVoidMethods"
         language="java"
         message="All methods must be non void."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!novoidmethods">
      <description>
         As an exercise no void methods are allowed. This is the functional style. Only JUnit tests and custom asserts can have void methods.
         Allows implementing Runnable.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Void='true' and
        not(../Annotation/MarkerAnnotation/Name[@Image='Test' or @Image='Before' or @Image='After']) and
        not(MethodDeclarator[@Image='run' or substring(@Image,1,6)='assert'])
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class BadClass {
    public void voidMethod(){
    }
}
public class OkClass {
    public int getIt(){
    }
}
]]>
      </example>
   </rule>


   <rule name="NoLoops"
         language="java"
         message="No loops."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!noloops">
      <description>
         As an exercise no loop constructs are allowed. You cannot use for, do or while.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//ForStatement | //WhileStatement | //DoStatement
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public void main() {
    for (int i = 0; i < 3; i++) { }

    int i = 0;
    while (i < 3) { i++; }

    do { } while (false);
}
]]>
      </example>
   </rule>


   <rule name="NoElseKeyword"
         language="java"
         message="No else keyword."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!noelsekeyword">
      <description>
         As an exercise no else statement is allowed. This is rule 2 of Object Calisthenics.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//IfStatement[@Else='true']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public void main() {
        // ok, no else
        if (true) { }

        // bad, hase else
        if (false) { } else { }
    }
}
]]>
      </example>
   </rule>


   <rule name="NoConditionals"
         language="java"
         message="No conditional statements."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!noconditionals">
      <description>
         As an exercise no conditional statements are allowed. You cannot use if, while, switch or ?:.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//IfStatement | //WhileStatement | //ConditionalExpression | //SwitchStatement
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public void main() {
        if (true) {  }
        int i = true ? 1 : 2;
        switch(i) { case 0: break; }
        while(true) {  }
    }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="NoGetterAndSetter"
         language="java"
         message="Don't use getters or setters."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!nogetterandsetter">
      <description>
         Do not use getter or setter to enforces encapsulation. This is rule 9 of Object Calisthenics.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration [
  @Synchronized='false' and
  count(Block/BlockStatement)=1 and
  (
     (
        MethodDeclarator/FormalParameters[count(FormalParameter)=1] and
        ResultType[count(Type)=0] and
        Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression[
           (count(PrimarySuffix/Arguments)=0) and
           (count(descendant::Expression)=0)
        ] and
        //AssignmentOperator[@Image='=']
     ) or (
        MethodDeclarator/FormalParameters[count(FormalParameter)=0] and
        ResultType/Type[count(ReferenceType)=1] and
        Block/BlockStatement/Statement/ReturnStatement/Expression/PrimaryExpression[
           (count(PrimarySuffix/descendant::*)=0) and
           (count(descendant::Expression)=0) and
           (count(descendant::AllocationExpression)=0)
        ] and
        count(Block/BlockStatement/Statement/ReturnStatement)=1
     )
  )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
class AvoidGetterAndSetterExample {
   String myVariable;
   void setMyVariable(String pMyVariable) {    // don't use
      myVarialbe = pMyVariable;
   }
   ...
   myVariable = "asdfasdf";
}
]]>
      </example>
   </rule>


   <rule name="OnlyStaticMethods"
         language="java"
         message="All methods must be static."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!onlystaticmethods">
      <description>
         As an exercise only static methods are allowed. This exaggerates the common mistake to have too many static methods. 
         Only inherited Object methods can be non-static, Comparable and Comparator.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[ @Static='false' and
        not(@MethodName='hashCode' or @MethodName='equals'    or
            @MethodName='toString' or @MethodName='clone'     or
            @MethodName='compare'  or @MethodName='compareTo' or
            @MethodName='run')
    ]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public int nonStaticMethod(byte b){
        return 1;
    }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule deprecated="true" name="ImmutablesOnly" ref="rulesets/java/codecop.xml/ImmutablesOnly" />


   <rule name="OnlyStaticFields"
         language="java"
         message="All fields must be static."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!onlystaticfields">
      <description>
         As an exercise only static fields are allowed. This exaggerates the common mistake to have too many static fields.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Static='false']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class SomeClass {
   private String channel; // not ok
   private static boolean showIfSearchedInRegion; // ok
}
]]>
      </example>
   </rule>


   <!-- naming.xml --> <!-- idea by Christian Haas -->
   <rule name="LooongIdentifiers"
         language="java"
         message="Identifier minimum 20 characters."
         class="org.codecop.pmd.constraints.LooongIdentifiers"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!looongidentifiers">
      <description>
         To enforce giving names meaningful names, every identifier shall be at least x characters. With x in the range of possibly 40.
         This forces people to let go of things like "num" or "i1" and "i2". This is part 1 of 20/80, see
         http://manynames.sevensuns.at/technojoy/2014/12/2080-a-coding-dojo-constraint-just-for-fun.html
      </description>
      <priority>3</priority>
      <properties>
         <property name="identifierMinLen" type="Integer" description="Minimal length of identifier names" min="1" max="99" value="20" />
      </properties>
      <example>
<![CDATA[
package possiblenextmovesreversi;

public class ReversiBoardPosition {
    private final int xCoordOfReversiBoard;
    private final int yCoordOfReversiBoard;

    public ReversiBoardPosition(int xCoordOfReversiBoard, int yCoordOfReversiBoard) {
        this.xCoordOfReversiBoard = xCoordOfReversiBoard;
        this.yCoordOfReversiBoard = yCoordOfReversiBoard;
    }
}
]]>
      </example>
   </rule>


   <!-- codesize.xml --> <!-- idea by Christian Haas -->
   <rule name="ShortStatements"
         language="java"
         message="Lines maximum 80 characters."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!shortstatements">
      <description>
         Keep statements (lines) short, so not many long identifiers can fit in. This is part 2 of 20/80, see
         http://manynames.sevensuns.at/technojoy/2014/12/2080-a-coding-dojo-constraint-just-for-fun.html
      </description>
      <priority>3</priority>
      <properties>
         <property name="lineMaxLen" type="Integer" description="Maximal length of lines" min="40" max="200" value="80" />
         <property name="xpath">
            <value>
<![CDATA[
//BlockStatement[   (@SingleLine='false') or (number(@EndColumn)-number(@BeginColumn) > $lineMaxLen) ] |
//FieldDeclaration[ (@SingleLine='false') or (number(@EndColumn)-number(@BeginColumn) > $lineMaxLen) ] |
//MethodDeclarator[ (@SingleLine='false') or (number(@EndColumn)-number(@BeginColumn) > $lineMaxLen) ]
]]>
                <!-- FieldDeclaration does not capture the modifiers, so not 100% accurate -->
                <!-- MethodDeclarator does not capture the return type, so not 100% accurate -->
            </value>
         </property>
      </properties>
   </rule>


   <!-- design.xml -->
   <rule name="NoStaticFields"
         language="java"
         message="No fields must be static."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!nostaticfields">
      <description>
         As an exercise no static fields are allowed. This fights the common mistake to have too many static fields.
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[@Static='true']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class SomeClass {
   private static String channel; // not ok
   private boolean showIfSearchedInRegion; // ok
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="NoStaticMethods"
         language="java"
         message="No methods must be static."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!nostaticmethods">
      <description>
         As an exercise no static methods are allowed. This fights the common mistake to have too many static methods. 
      </description>
      <priority>3</priority>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//MethodDeclaration[@Static='true']
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
public class Foo {
    public static int staticMethod(byte b){
        return 1;
    }
}
]]>
      </example>
   </rule>


   <!-- design.xml -->
   <rule name="OnlyMapsAsParameters"
         language="java"
         message="Use Maps as single parameter of public methods."
         class="net.sourceforge.pmd.lang.rule.XPathRule"
         externalInfoUrl="https://bitbucket.org/pkofler/pmd-rules/wiki/PmdRulesConstraints.wiki#!onlymapsasparameters">
      <description>
         According to POODR, use Maps as single argument in public API to make your code the most extensible without
         breaking callers because the API never changes. Also use default values in the Maps as much as possible.
      </description>
      <priority>2</priority>
      <properties>
         <property name="paramType" type="String" description="Simple name of the Map type allowed for public arguments" value="Map" />
         <property name="xpath">
            <value>
<![CDATA[
//ConstructorDeclaration[ 
    @Public='true' and
    (
        FormalParameters[@ParameterCount > 1]  |
        FormalParameters/FormalParameter/Type/PrimitiveType  |
        FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[ not (@Image=$paramType) ] 
    )
]
|
//MethodDeclaration[ 
    @Public='true' and
    not(@MethodName='equals' or @MethodName='compare' or @MethodName='compareTo' ) and
    (
        MethodDeclarator/FormalParameters[@ParameterCount > 1]  |
        MethodDeclarator/FormalParameters/FormalParameter/Type/PrimitiveType  |
        MethodDeclarator/FormalParameters/FormalParameter/Type/ReferenceType/ClassOrInterfaceType[ not (@Image=$paramType) ] 
    )
]
]]>
            </value>
         </property>
      </properties>
      <example>
<![CDATA[
import java.util.Map;

public class Sandbox {
  public Sandbox(Map<?, ?> a) { } // public can only have Map
  public void run(Map<?, ?> a) { } // public can only have Map
  private void later(int i) { } // private can do anything
  public boolean equals(Object obj) { return false; } // equals is allowed
}
]]>
      </example>
   </rule>

</ruleset>
