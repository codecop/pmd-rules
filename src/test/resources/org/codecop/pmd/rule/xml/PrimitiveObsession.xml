<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
too many Strings in method
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class BadObject {
   public void badMethod(String a, String b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
int in method
     ]]></description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
class BadObject {
   public void sad(int a) { };
   public void more(java.lang.String b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
primitive arrays are primitive
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class BadObject {
   public void sad(byte[] buf, Date when) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
collections are primitive
     ]]></description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
import java.util.Set;
class BadObject {
   public void sad1(java.util.List buf, Date when) { };
   public void sad2(Set buf, Date when) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private constructors and methods can do anything.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class HiddenObject {
   private HiddenObject(String a) { };
   private void hidden(int a, int b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private constructors with too many arguments, can do anything.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class HiddenObject {
   private HiddenObject(String a, String b, String c) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
all is well, a real value object
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class ValueObject {
   public ValueObject(int number) { };
   public int getNumber() { return 0; }
   public boolean getBranch() { return false; }
   public String toString() { return "0"; }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
Object is allowed in default
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class SomeObject {
   public void someMethod(Object a, Object b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
primitive return types only in plain getters, no parameters
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class BadObject {
   public String sad(Date when) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
constructor can take everything because we need to wrap it inside, e.g. Coordinate(int, int)
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class GoodObject {
   public GoodObject(String a) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
constructor with too many arguments, not checked by default
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class GoodObject {
   public GoodObject(String a, String b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
equals method must be allowed for containers.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class EqualObject {
    public boolean equals(Object obj) {
        return (this == obj);
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
wrong equals method uses primitive.
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class EqualObject {
    public boolean equals(String obj, String another) {
        return (this == obj);
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
property test constructors: with too many arguments
     ]]></description>
        <rule-property name="checkConstructors">true</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class Foo {
   public Foo(String a, String b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
property test constructors: only one argument
     ]]></description>
        <rule-property name="checkConstructors">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class Foo {
   public Foo(String a) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
property no object: Object is forbidden
     ]]></description>
        <rule-property name="allowObject">false</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class SomeObject {
   public void someMethod(Object a, Object b) { };
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
property no object: my own value is ok
     ]]></description>
        <rule-property name="allowObject">false</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class SomeObject {
   public void someMethod(DomainValue a, DomainValue b) { };
}
     ]]></code>
    </test-code>
</test-data>
